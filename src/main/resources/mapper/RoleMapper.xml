<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xuexi.v2.mapper.RoleMapper">
  <resultMap id="BaseResultMap" type="com.xuexi.v2.domain.Role">
    <id column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="role_key" jdbcType="VARCHAR" property="roleKey" />
    <result column="role_name" jdbcType="VARCHAR" property="roleName" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Base_Column_List">
    role_id,role_key, role_name, description, status
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_role
    where role_id = #{roleId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xuexi.v2.domain.Role">
    insert into t_role (role_id,role_key, role_name, description, 
      status)
    values (#{roleId,jdbcType=INTEGER}, #{roleKey,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}, #{description,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.xuexi.v2.domain.Role">
    insert into t_role
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        role_id,
      </if>
      <if test="roleKey != null">
        role_key,
      </if>
      <if test="roleName != null">
        role_name,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
       <if test="roleKey != null">
        #{roleKey,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xuexi.v2.domain.Role">
    update t_role
    <set>
       <if test="roleKey != null">
        role_key = #{roleKey,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        role_name = #{roleName,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xuexi.v2.domain.Role">
    update t_role
    set role_key = #{roleKey,jdbcType=VARCHAR},
    role_name = #{roleName,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER}
    where role_id = #{roleId,jdbcType=INTEGER}
  </update>
  
  <resultMap id="RoleResourceResult" type="com.xuexi.v2.domain.Role" extends="BaseResultMap">
		<collection property="resources" ofType="com.xuexi.v2.domain.Resource">
			<id column="id" jdbcType="INTEGER" property="id" />
		    <result column="resource_key" jdbcType="VARCHAR" property="resourceKey" />
		    <result column="resource_value" jdbcType="VARCHAR" property="resourceValue" />
		    <result column="url" jdbcType="VARCHAR" property="url" />
		    <result column="available" jdbcType="BIT" property="available" />
		    <result column="type" jdbcType="INTEGER" property="type" />
		</collection>
  </resultMap>
  <select id="findRoleResource" parameterType="Map" resultMap="RoleResourceResult">
   	SELECT 
   	 	t2.role_id,t2.role_key,t2.role_name, t2.description,t2.status,
		t.id,t.resource_key,t.resource_value,t.url,t.menu_icon,t.module_id,t.type,t.available  
		from t_resource t
		LEFT JOIN t_role_resource_relation t1 on t1.resource_id = t.id
		LEFT JOIN t_role t2 on t2.role_id = t1.role_id
		LEFT JOIN t_user_role_relation t3 on t3.role_id = t2.role_id 
	<where>
		<if test="userId != null">
			and t3.user_id = #{userId}
		</if>
	</where>
	order by t2.role_id,t.id 
  </select>
  
  <select id="findPage" parameterType="Map" resultMap="BaseResultMap">
	select
		 <include refid="Base_Column_List" />
	from t_role t
	<where>
		<if test="roleName != null">
			and t.role_name like CONCAT('%', #{roleName},'%')
		</if>
	</where>
	ORDER BY t.role_id
  </select>
  
  <delete id="deleteRightRoleId" parameterType="Map">
	delete from t_role_resource_relation where role_id = #{roleId,jdbcType=INTEGER}
 </delete>
 
 <insert id="insertRightBatch" parameterType="java.util.List">
	insert into t_role_resource_relation (role_id, resource_id) values
	<foreach collection="list" item="item" index="index" separator=",">
		(#{item.roleId,jdbcType=INTEGER}, #{item.resourceId,jdbcType=INTEGER})
	</foreach>
</insert>
  
</mapper>